{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1r1faap6VWvwA2ZzkuO9unL-kA5vBi3MY","timestamp":1757236239698}],"authorship_tag":"ABX9TyPG88hzKyssrGZTQ5/iQEjX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import tkinter as tk\n","from tkinter import messagebox, simpledialog\n","\n","class Book:\n","    def __init__(self, title, author):\n","        self.title = title\n","        self.author = author\n","        self.is_borrowed = False\n","\n","    def __str__(self):\n","        status = \"Borrowed\" if self.is_borrowed else \"Available\"\n","        return f\"'{self.title}' by {self.author} [{status}]\"\n","\n","class Library:\n","    def __init__(self):\n","        self.books = []\n","\n","    def add_book(self, book):\n","        self.books.append(book)\n","\n","    def borrow_book(self, title):\n","        for book in self.books:\n","            if book.title == title and not book.is_borrowed:\n","                book.is_borrowed = True\n","                return True\n","        return False\n","\n","    def return_book(self, title):\n","        for book in self.books:\n","            if book.title == title and book.is_borrowed:\n","                book.is_borrowed = False\n","                return True\n","        return False\n","\n","class LibraryApp:\n","    def __init__(self, root):  # <-- corrected constructor name\n","        self.library = Library()\n","        self.root = root\n","        self.root.title(\"Library Management System\")\n","        self.root.geometry('530x450')\n","\n","        frm = tk.Frame(root)\n","        frm.pack(pady=10)\n","\n","        tk.Button(frm, text=\"View Books\", width=25, command=self.view_books).grid(row=0, column=0, pady=5)\n","        tk.Button(frm, text=\"Add Book\", width=25, command=self.add_book).grid(row=1, column=0, pady=5)\n","        tk.Button(frm, text=\"Borrow Book\", width=25, command=self.borrow_book).grid(row=2, column=0, pady=5)\n","        tk.Button(frm, text=\"Return Book\", width=25, command=self.return_book).grid(row=3, column=0, pady=5)\n","        tk.Button(frm, text=\"Exit\", width=25, command=root.quit).grid(row=4, column=0, pady=5)\n","\n","        self.books_listbox = tk.Listbox(root, width=70, height=15)\n","        self.books_listbox.pack(pady=10)\n","        self.view_books()\n","\n","    def view_books(self):\n","        self.books_listbox.delete(0, tk.END)\n","        if not self.library.books:\n","            self.books_listbox.insert(tk.END, \"No books available.\")\n","        else:\n","            for idx, book in enumerate(self.library.books, 1):\n","                self.books_listbox.insert(tk.END, f\"{idx}. {book}\")\n","\n","    def add_book(self):\n","        title = simpledialog.askstring(\"Add Book\", \"Enter book title:\")\n","        if not title: return\n","        author = simpledialog.askstring(\"Add Book\", \"Enter author name:\")\n","        if not author: return\n","        self.library.add_book(Book(title, author))\n","        messagebox.showinfo(\"Success\", \"Book added successfully!\")\n","        self.view_books()\n","\n","    def borrow_book(self):\n","        title = simpledialog.askstring(\"Borrow Book\", \"Enter book title to borrow:\")\n","        if not title: return\n","        result = self.library.borrow_book(title)\n","        if result:\n","            messagebox.showinfo(\"Borrowed\", f\"Borrowed: {title}\")\n","        else:\n","            messagebox.showerror(\"Error\", \"Book not available or already borrowed!\")\n","        self.view_books()\n","\n","    def return_book(self):\n","        title = simpledialog.askstring(\"Return Book\", \"Enter book title to return:\")\n","        if not title: return\n","        result = self.library.return_book(title)\n","        if result:\n","            messagebox.showinfo(\"Returned\", f\"Returned: {title}\")\n","        else:\n","            messagebox.showerror(\"Error\", \"Book not found or not borrowed!\")\n","        self.view_books()\n","\n","if __name__ == \"__main__\":  # <-- corrected main guard\n","    root = tk.Tk()\n","    app = LibraryApp(root)\n","    root.mainloop()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":332},"id":"jIDnHzNZbZ0r","executionInfo":{"status":"error","timestamp":1757236014380,"user_tz":-330,"elapsed":118,"user":{"displayName":"Sorna kalyani","userId":"09702472958340952135"}},"outputId":"47f168f3-fad8-4656-94ca-428f4cb26b14"},"execution_count":2,"outputs":[{"output_type":"error","ename":"TclError","evalue":"no display name and no $DISPLAY environment variable","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTclError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-1709725997.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# <-- corrected main guard\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m     \u001b[0mroot\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m     \u001b[0mapp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLibraryApp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0mroot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmainloop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.12/tkinter/__init__.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, screenName, baseName, className, useTk, sync, use)\u001b[0m\n\u001b[1;32m   2347\u001b[0m                 \u001b[0mbaseName\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbaseName\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2348\u001b[0m         \u001b[0minteractive\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2349\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_tkinter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscreenName\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbaseName\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassName\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minteractive\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwantobjects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0museTk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msync\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2350\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0m_debug\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2351\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtk\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msettrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_print_command\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTclError\u001b[0m: no display name and no $DISPLAY environment variable"]}]}]}